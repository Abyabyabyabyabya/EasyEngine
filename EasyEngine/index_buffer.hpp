///
/// \file   index_buffer.hpp
/// \brief  頂点インデックスバッファ定義ヘッダ
///
/// \author 板場
///
/// \par    履歴
///         - 2020/9/1
///             - ヘッダ追加
///             - IndexBuffer 定義
///
#ifndef INCLUDED_EGEG_GLIB_INDEX_BUFFER_HEADER_
#define INCLUDED_EGEG_GLIB_INDEX_BUFFER_HEADER_

#include <cstdint>
#include <vector>
#include <d3d11.h>
#include <wrl.h>

namespace easy_engine {
namespace g_lib {

/******************************************************************************

    IndexBuffer

******************************************************************************/
///
/// \brief  頂点インデックスバッファ
///
class IndexBuffer {
public :
    ///
    /// \brief  デフォルトのコンストラクタ
    ///
    ///         バッファは生成しません。
    ///
    IndexBuffer() = default;

    ///
    /// \brief  バッファを生成するコンストラクタ
    ///
    ///         引数のデータを持つバッファを生成します。
    ///         インデックスを表す型のサイズは16bitです。
    ///
    IndexBuffer(const std::vector<std::uint16_t>& Data) : 
      IndexBuffer{16U*Data.size(), D3D11_SUBRESOURCE_DATA{Data.data(), 0, 0}, DXGI_FORMAT::DXGI_FORMAT_R16_UINT} {}
    ///
    /// \brief  バッファを生成するコンストラクタ
    ///
    ///         引数のデータを持つバッファを生成します。
    ///         インデックスを表す型のサイズは32bitです。
    ///
    IndexBuffer(const std::vector<std::uint32_t>& Data) :
      IndexBuffer{32U*Data.size(), D3D11_SUBRESOURCE_DATA{Data.data(), 0, 0}, DXGI_FORMAT::DXGI_FORMAT_R32_UINT} {}

    ///
    /// \brief  有効な頂点インデックスバッファかどうか判定
    ///
    ///         true  : 有効
    ///         false : 無効
    ///
    /// \return 判定結果
    ///
    bool isValid() const noexcept { return ibuf_; }
    operator bool() const noexcept { return isValid(); }

    /// バッファオブジェクトを取得
    ID3D11Buffer* buffer() const noexcept { return ibuf_.Get(); } 
    /// インデックスフォーマットを取得
    DXGI_FORMAT format() const noexcept { return format_; }
protected :
    IndexBuffer(UINT, const D3D11_SUBRESOURCE_DATA&, DXGI_FORMAT);
private :
    Microsoft::WRL::ComPtr<ID3D11Buffer> ibuf_;
    DXGI_FORMAT format_;
};

} // namespace g_lib
} // namespace easy_engine
#endif // !INCLUDED_EGEG_GLIB_INDEX_BUFFER_HEADER_
// EOF
